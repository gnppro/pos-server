// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductType {
  SIMPLE
  VARIANT
  GROUPED
  VIRTUAL
}

enum PromotionType {
  PERCENTAGE
  FIXED
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PublishedScope {
  LOCAL
  WEB
  ALL
}

enum WeightUnit {
  KG
  G
  MG
  LB
  OZ
}

enum LongUnit {
  M
  CM
  MM
  IN
}

enum OrderStatus {
  CANCELLED
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  TRANSFER
  PAY_LATER
}

enum InvoiceStatus {
  PENDING
  ISSUED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELLED
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  longDescription  String?
  shortDescription String?
  sku              String?
  barcode          String?
  tags             String[]           @default([])
  price            Float              @default(0)
  buyPrice         Float?
  quantity         Int                @default(0)
  isFeatured       Boolean            @default(false)
  isTaxable        Boolean            @default(true)
  isShipping       Boolean            @default(true)
  isReturnable     Boolean            @default(true)
  isRefrigerated   Boolean            @default(false)
  type             ProductType        @default(SIMPLE)
  weight           Float?
  weightUnit       WeightUnit?
  packedHeight     Float?
  packedWidth      Float?
  packedDepth      Float?
  packedUnit       LongUnit?
  status           ProductStatus      @default(DRAFT)
  publishedScope   PublishedScope     @default(ALL)
  publishedAt      DateTime?
  inventory        Inventory?
  supplierId       Int?
  supplier         Supplier?          @relation(fields: [supplierId], references: [id])
  categories       ProductCategory[]
  images           ProductImage[]
  variants         ProductVariant[]
  options          ProductOption[]
  reviews          Review[]
  promotions       Promotion[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  productsOnOrders ProductsOnOrders[]
  productsOnGroups ProductsOnGroups[]
  Tranfer          Tranfer[]
}

model Group {
  id               Int                @id @default(autoincrement())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  productsOnGroups ProductsOnGroups[]
}

model ProductsOnGroups {
  id               Int             @id @default(autoincrement())
  groupId          Int
  group            Group           @relation(fields: [groupId], references: [id])
  productId        Int?
  product          Product?        @relation(fields: [productId], references: [id])
  productVariantId Int?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Review {
  id         Int       @id @default(autoincrement())
  title      String
  comment    String
  rating     Int
  productId  Int
  product    Product   @relation(fields: [productId], references: [id])
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Promotion {
  id          Int           @id @default(autoincrement())
  name        String
  code        String        @unique
  startDate   DateTime
  endDate     DateTime
  description String
  isActive    Boolean       @default(true)
  type        PromotionType
  value       Float
  productId   Int?
  product     Product?      @relation(fields: [productId], references: [id])
  invoices    Invoice[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductImage {
  id               Int             @id @default(autoincrement())
  url              String
  position         Int             @default(1)
  productId        Int?
  product          Product?        @relation(fields: [productId], references: [id])
  productVariantId Int?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Attribute {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductVariant {
  id               Int                @id @default(autoincrement())
  values           String[]
  sku              String?
  barcode          String?
  price            Float?
  buyPrice         Float?
  position         Int                @default(1)
  weight           Float?
  weightUnit       WeightUnit?
  packedHeight     Float?
  packedWidth      Float?
  packedDepth      Float?
  packedUnit       LongUnit?
  productId        Int
  product          Product            @relation(fields: [productId], references: [id])
  images           ProductImage[]
  inventory        Inventory?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  productsOnOrders ProductsOnOrders[]
  productsOnGroups ProductsOnGroups[]
}

model ProductOption {
  id        Int      @id @default(autoincrement())
  name      String
  position  Int      @default(1)
  values    String[]
  productId Int
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id               Int             @id @default(autoincrement())
  quantity         Int
  minimumQuantity  Int             @default(0)
  maximumQuantity  Int?
  reorderLevel     Int?
  productId        Int?            @unique
  product          Product?        @relation(fields: [productId], references: [id])
  productVariantId Int?            @unique
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  warehouseId      Int?
  Warehouse        Warehouse?      @relation(fields: [warehouseId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Warehouse {
  id          Int         @id @default(autoincrement())
  name        String
  addressId   Int         @unique
  address     Address     @relation(fields: [addressId], references: [id])
  inventory   Inventory[]
  tranferFrom Tranfer[]   @relation("fromWarehouse")
  tranferTo   Tranfer[]   @relation("toWarehouse")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String    @unique
  addressId Int       @unique
  address   Address   @relation(fields: [addressId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id         Int                @id @default(autoincrement())
  number     String             @unique
  status     OrderStatus        @default(PENDING)
  invoice    Invoice?
  customerId Int
  customer   Customer           @relation(fields: [customerId], references: [id])
  employeeId Int?
  employee   Employee?          @relation(fields: [employeeId], references: [id])
  shippers   Shipper[]
  deliveries Delivery[]
  items      ProductsOnOrders[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Invoice {
  id          Int           @id @default(autoincrement())
  number      String        @unique
  rfc         String        @default("XAXX010101000")
  dueDate     DateTime
  status      InvoiceStatus
  subtotal    Float
  total       Float
  shipping    Float?
  tax         Float?
  discount    Float?
  coupon      String?
  payments    Payment[]
  orderId     Int           @unique
  order       Order         @relation(fields: [orderId], references: [id])
  promotionId Int?
  promotion   Promotion?    @relation(fields: [promotionId], references: [id])
  currency    String        @default("MXN")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductsOnOrders {
  id               Int             @id @default(autoincrement())
  quantity         Int
  price            Float
  discount         Float?
  total            Float
  productId        Int?
  product          Product?        @relation(fields: [productId], references: [id])
  productVariantId Int?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  orderId          Int
  order            Order           @relation(fields: [orderId], references: [id])
  deliveryId       Int?
  delivery         Delivery?       @relation(fields: [deliveryId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Customer {
  id          Int       @id @default(autoincrement())
  creditLimit Float?
  firstName   String?
  lastName    String?
  contactName String?
  email       String
  phone       String?
  addresses   Address[]
  orders      Order[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id        Int           @id @default(autoincrement())
  number    String
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  amount    Float
  currency  String        @default("MXN")
  invoiceId Int
  invoice   Invoice       @relation(fields: [invoiceId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Employee {
  id             Int        @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  secondLastName String?
  email          String
  phone          String
  addressId      Int        @unique
  address        Address    @relation(fields: [addressId], references: [id])
  jobTitle       String
  photo          String?
  reportsToId    Int?
  reportsTo      Employee?  @relation("EmployeeHierarchy", fields: [reportsToId], references: [id])
  subordinates   Employee[] @relation("EmployeeHierarchy")
  orders         Order[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Shipper {
  id         Int        @id @default(autoincrement())
  orders     Order[]
  deliveries Delivery[]
  name       String
  email      String
  phone      String
  company    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// TODO: Add history delivery updates model
model Delivery {
  id               Int                @id @default(autoincrement())
  status           DeliveryStatus     @default(PENDING)
  trakingNumber    String
  salesDate        DateTime
  expedtedDate     DateTime
  deliveredAt      DateTime?
  cost             Float
  productsOnOrders ProductsOnOrders[]
  orderId          Int
  order            Order              @relation(fields: [orderId], references: [id])
  shipperId        Int
  shipper          Shipper            @relation(fields: [shipperId], references: [id])
  addressId        Int
  address          Address            @relation(fields: [addressId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Address {
  id         Int        @id @default(autoincrement())
  address    String
  city       String
  state      String
  zip        String
  country    String     @default("MEX")
  customerId Int?
  customer   Customer?  @relation(fields: [customerId], references: [id])
  employee   Employee?
  supplier   Supplier?
  warehouse  Warehouse?
  deliveries Delivery[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Tranfer {
  id        Int       @id @default(autoincrement())
  fromId    Int
  from      Warehouse @relation("fromWarehouse", fields: [fromId], references: [id])
  toId      Int
  to        Warehouse @relation("toWarehouse", fields: [toId], references: [id])
  productId Int
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// TODO: Add logs with createdBy and updatedBy fields by User model
// createdBy   String 
// updatedBy   String
